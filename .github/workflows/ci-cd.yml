# .github/workflows/ci-cd.yml
name: CI (main)

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: ci-main-fake-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: clean-service-main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run Tests
        run: |
          ./mvnw -B test -s settings.xml -Partifactory \
            -Dartifactory.url=${{ secrets.ARTIFACTORY_URL }} \
            -Dsnapshot.repo=${{ secrets.SNAPSHOT_REPO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Nexus Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.NEXUS_DOCKER_REGISTRY }}
          username: ${{ secrets.NEXUS_USERNAME }}
          password: ${{ secrets.NEXUS_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.NEXUS_DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ secrets.NEXUS_DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          build-args: |
            ARTIFACTORY_URL=${{ secrets.ARTIFACTORY_URL }}
            SNAPSHOT_REPO=${{ secrets.SNAPSHOT_REPO }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          command_timeout: 20m
          script: |
            set -euo pipefail
            
            # Login to Nexus Docker registry
            echo "${{ secrets.NEXUS_PASSWORD }}" | docker login ${{ secrets.NEXUS_DOCKER_REGISTRY }} -u "${{ secrets.NEXUS_USERNAME }}" --password-stdin
            
            # Get current image tag (if running)
            PREV_IMAGE=$(docker inspect --format='{{.Config.Image}}' clean-service-main 2>/dev/null || echo "")
            
            # Pull and run new image (use commit SHA tag for rollback support)
            docker pull ${{ secrets.NEXUS_DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker stop clean-service-main || true
            docker rm clean-service-main || true
            
            docker run -d \
              --name clean-service-main \
              --restart unless-stopped \
              -p 8080:8080 \
              ${{ secrets.NEXUS_DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
            # Health check
            for i in {1..20}; do
              if curl -fsS "http://localhost:8080/actuator/health" >/dev/null; then
                echo "Application is healthy"; exit 0
              fi
              sleep 3
            done
            
            echo "Health check failed, rolling back..."
            
            # Stop failed container
            docker stop clean-service-main || true
            docker rm clean-service-main || true
            
            # Rollback if previous image exists
            if [ -n "$PREV_IMAGE" ]; then
              docker run -d \
                --name clean-service-main \
                --restart unless-stopped \
                -p 8080:8080 \
                "$PREV_IMAGE"
              echo "Rollback to previous image: $PREV_IMAGE"
            else
              echo "No previous image to rollback to."
            fi
            
            exit 1
